name: Full Deploy Pipeline

on:
#  push:
#    branches: [main]
#    paths:
#      - 'terraform/**'
#      - 'server/**'
#      - 'client/**'
  workflow_dispatch: {}
jobs:
  infra:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    permissions:
      id-token: write
      contents: read

    env:
      TF_VAR_atlas_private_key: ${{ secrets.ATLAS_PRIVATE_KEY }}
      TF_VAR_atlas_public_key: ${{ secrets.ATLAS_PUBLIC_KEY }}
      TF_VAR_mongo_password: ${{ secrets.MONGO_PASSWORD }}
      TF_VAR_neo4j_username: ${{ secrets.NEO4J_USER }}
      TF_VAR_neo4j_password: ${{ secrets.NEO4J_PASSWORD }}
      TF_VAR_neo4j_uri: ${{ secrets.NEO4J_URI }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{vars.OIDC}}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (with detailed exit code)
        id: tfplan
        run: |
          terraform plan -detailed-exitcode -out=tfplan.out
        continue-on-error: true

      - name: Check for Changes
        id: tfcheck
        run: |
          if [ "${{ steps.tfplan.outputs.exitcode }}" == "2" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply (only if changes)
        if: steps.tfcheck.outputs.changes == 'true'
        run: terraform apply -auto-approve tfplan.out

  server-deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install and Build Backend
        working-directory: ./server
        run: |
          npm install
          npm run build

      - name: Create .env File
        working-directory: ./server
        run: |
          echo "NEO4J_URI=${{ secrets.NEO4J_URI }}" >> .env
          echo "NEO4J_USER=${{ secrets.NEO4J_USER }}" >> .env
          echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}" >> .env
          echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> .env
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> .env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "CALLBACK_URL=${{ secrets.CALLBACK_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env

      - name: Upload Backend to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{vars.EC2_USER}}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: server/dist/
          target: ~/app/backend

      - name: Restart Backend with PM2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Ensure Node.js and PM2 are installed
            which node || (curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - && sudo apt-get install -y nodejs)
            which pm2 || sudo npm install -g pm2

            cd ~/app/backend/dist

            if pm2 describe linkup-api > /dev/null; then
              echo "Restarting existing PM2 app..."
              pm2 restart linkup-api
            else
              echo "Starting new PM2 app..."
              pm2 start server.js --name linkup-api
            fi

            pm2 save

      - name: Configure Nginx as Reverse Proxy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt update -y
            sudo apt install -y nginx

            # Create Nginx config
            cat <<EOF | sudo tee /etc/nginx/sites-available/linkup
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF

            sudo ln -sf /etc/nginx/sites-available/linkup /etc/nginx/sites-enabled/default
            sudo nginx -t && sudo systemctl reload nginx

      - name: Health Check
        run: |
          curl --fail https://${{ secrets.EC2_HOST }}/health || exit 1

  client-deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: server-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install and Build React App
        working-directory: ./client
        run: |
          npm install
          npm run build

      - name: Upload Build to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{vars.EC2_USER}}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: client/build/
          target: ~/app/client

      - name: Configure Nginx for React
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{vars.EC2_USER}}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo apt update
            sudo apt install -y nginx certbot python3-certbot-nginx

            sudo tee /etc/nginx/sites-available/default > /dev/null <<EOF
            server {
              listen 80;
              server_name ec2-13-246-192-21.af-south-1.compute.amazonaws.com
            
              root /home/ubuntu/app/client;
              index index.html;
            
              location / {
                try_files \$uri /index.html;
              }
            
              location /api/ {
                proxy_pass http://localhost:3000/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
              }
            }
            EOF
            
            sudo nginx -t && sudo systemctl restart nginx
            
            # Run only on first deploy or cert expiration
            sudo certbot --non-interactive --nginx \
            -d yourdomain.com -d www.yourdomain.com \
            --agree-tos -m admin@yourdomain.com

